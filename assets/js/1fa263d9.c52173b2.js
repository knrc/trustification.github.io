"use strict";(self.webpackChunktrustification_io=self.webpackChunktrustification_io||[]).push([[9974],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=p(n),m=r,d=h["".concat(l,".").concat(m)]||h[m]||u[m]||o;return n?a.createElement(d,i(i({ref:t},c),{},{components:n})):a.createElement(d,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[h]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4859:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={title:"Is this a cryptographic key which I see before me?",authors:"danbev",tags:[]},i=void 0,s={permalink:"/blog/2023/01/25/keys",editUrl:"https://github.com/trustification/trustification.github.io/tree/main/blog/2023-01-25-keys.md",source:"@site/blog/2023-01-25-keys.md",title:"Is this a cryptographic key which I see before me?",description:"Yes, it is. Really? Then what format is it in and how can I tell?",date:"2023-01-25T00:00:00.000Z",formattedDate:"January 25, 2023",tags:[],readingTime:3.565,hasTruncateMarker:!0,authors:[{name:"Daniel Bevenius",title:"Maintainer",url:"https://github.com/danbev",imageURL:"https://github.com/danbev.png",key:"danbev"}],frontMatter:{title:"Is this a cryptographic key which I see before me?",authors:"danbev",tags:[]},prevItem:{title:"The Update Framework (TUF)",permalink:"/blog/2023/01/31/tuf"},nextItem:{title:"Sigstore bundle format",permalink:"/blog/2023/01/13/sigstore-bundle-format"}},l={authorsImageUrls:[void 0]},p=[{value:"PEM formatted keys",id:"pem-formatted-keys",level:2},{value:"DER formatted keys",id:"der-formatted-keys",level:2},{value:"When the guidelines fail",id:"when-the-guidelines-fail",level:2}],c={toc:p},h="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(h,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Yes, it is. Really? Then what format is it in and how can I tell?"),(0,r.kt)("p",null,"I've found myself in this situation a number of times and this post tries to\nprovide some guidelines for figuring out the type and format of keys without\nhaving to go off and read some project's documentation."),(0,r.kt)("p",null,"To start off we can try to determine if the key is in a PEM format, or in\nDER format."),(0,r.kt)("p",null,"Keys in PEM format are in ascii and can be inspected from the\ncommand line using ",(0,r.kt)("inlineCode",{parentName:"p"},"cat"),", or opened in any text editor. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ cat pubkey.pem\n-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEDTvL0PRsxoxMXfSaXu+7w0ovVNzZ\nk/BAIoz2GL2cPY3qZENU/+YrR92AuZFXn0jSmmvOktpAzGhnDhtidonkyA==\n-----END PUBLIC KEY-----\n")),(0,r.kt)("p",null,"If we try the same with DER format then we will get a bunch of strange\ncharacters printed. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},'$ cat pubkey.der\n;\ufffd\ufffd\ufffdl\u018cL]\ufffd\ufffd^\ufffd\ufffdJ/T\ufffd\u0653\ufffd@"\ufffd\ufffd\ufffd\ufffd=\ufffd\ufffddCT\ufffd\ufffd+G\u0740\ufffd\ufffdW\ufffdH\u049ak\u0392\ufffd@\ufffdhgv\ufffd\ufffd\ufffd$\n')),(0,r.kt)("h2",{id:"pem-formatted-keys"},"PEM formatted keys"),(0,r.kt)("p",null,"So we have determined that the key we have in front of us is in PEM format.\nNow, if we take a look at the PEM output above again:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEDTvL0PRsxoxMXfSaXu+7w0ovVNzZ\nk/BAIoz2GL2cPY3qZENU/+YrR92AuZFXn0jSmmvOktpAzGhnDhtidonkyA==\n-----END PUBLIC KEY-----\n")),(0,r.kt)("p",null,"We can see that it has a header and the footer. Notice that there is no\ninformation about the type of public key that this file contains. This means\nthat the information about the type of key in baked in there somewhere. So how\ncan we find out what the type of the key?",(0,r.kt)("br",{parentName:"p"}),"\n","One option is to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"openssl asn1parse")," command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ openssl asn1parse -i  -in pubkey.pem\n    0:d=0  hl=2 l=  89 cons: SEQUENCE\n    2:d=1  hl=2 l=  19 cons:  SEQUENCE\n    4:d=2  hl=2 l=   7 prim:   OBJECT            :id-ecPublicKey\n   13:d=2  hl=2 l=   8 prim:   OBJECT            :prime256v1\n   23:d=1  hl=2 l=  66 prim:  BIT STRING\n")),(0,r.kt)("p",null,"And we can see, that there is an id here which is ",(0,r.kt)("inlineCode",{parentName:"p"},"ecPublicKey"),"."),(0,r.kt)("p",null,"As a rule of thumb, if there is no key type in the PEM header, then\nthe format of the key is most probably in Subject Public Key Info (SPKI) if it\nis a public key, and in Public-Key Cryptography Standard 8 (pkcs8) format if it\nis a private key."),(0,r.kt)("p",null,"With the knowledge that the key is an Elliptic Curve (EC) public key we can use\nthe following openssl command to inspect it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ openssl ec -pubin -in pubkey.pem --text --noout\nread EC key\nPublic-Key: (256 bit)\npub:\n    04:0d:3b:cb:d0:f4:6c:c6:8c:4c:5d:f4:9a:5e:ef:\n    bb:c3:4a:2f:54:dc:d9:93:f0:40:22:8c:f6:18:bd:\n    9c:3d:8d:ea:64:43:54:ff:e6:2b:47:dd:80:b9:91:\n    57:9f:48:d2:9a:6b:ce:92:da:40:cc:68:67:0e:1b:\n    62:76:89:e4:c8\nASN1 OID: prime256v1\nNIST CURVE: P-256\n")),(0,r.kt)("p",null,"Some PEM keys can also be in a specific key format, in which case the type is\nin the header of the pem, for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"-----BEGIN RSA PUBLIC KEY-----\n...\n-----END RSA PUBLIC KEY-----\n")),(0,r.kt)("p",null,"And if needed we can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"openssl rsa")," command to inspect them further."),(0,r.kt)("p",null,"The same reasoning can be applied to private keys as well with regards to the\nPEM header/footer information, and in the case of private keys the ",(0,r.kt)("inlineCode",{parentName:"p"},"-pubin"),"\nargument to the openssl commands should left out."),(0,r.kt)("h2",{id:"der-formatted-keys"},"DER formatted keys"),(0,r.kt)("p",null,"As mentioned before we can't just print DER files as they are in binary format,\nbut we can still use ",(0,r.kt)("inlineCode",{parentName:"p"},"openssl asn1parse"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ openssl asn1parse -i -inform der  -in pubkey.der\n    0:d=0  hl=2 l=  89 cons: SEQUENCE\n    2:d=1  hl=2 l=  19 cons:  SEQUENCE\n    4:d=2  hl=2 l=   7 prim:   OBJECT            :id-ecPublicKey\n   13:d=2  hl=2 l=   8 prim:   OBJECT            :prime256v1\n   23:d=1  hl=2 l=  66 prim:  BIT STRING\n")),(0,r.kt)("p",null,"And just like with the PEM example we can use other openssl tools to inspect the\nkey."),(0,r.kt)("h2",{id:"when-the-guidelines-fail"},"When the guidelines fail"),(0,r.kt)("p",null,"The above seems to work for most situations, but it can fail."),(0,r.kt)("p",null,"One example of this is when openssl cannot parse the key at all. I ran into this\nrecently with ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/in-toto/in-toto-rs"},"in-toto-rs"),", which uses\nthe Rust ",(0,r.kt)("a",{parentName:"p",href:"https://crates.io/crates/ring"},"ring")," crate to handle Ed25519 keys."),(0,r.kt)("p",null,"The issue here is that ",(0,r.kt)("inlineCode",{parentName:"p"},"ring")," supports pkcs8 version 2\n(",(0,r.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/rfc/rfc5958"},"RFC-5958"),"), and OpenSSL currently only\nsupports pkcs8 version 1 (",(0,r.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/rfc/rfc5208"},"RFC-5208"),"),\nso the openssl tools will not be able to parse keys in the version 2 format."),(0,r.kt)("p",null,"Below is an example of trying to use a version 2 formatted Ed25519 key with\nopenssl:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ openssl pkey -inform der -in ed25519-1 -pubout\nCould not read key from ed25519-1\n")),(0,r.kt)("p",null,"There is an open ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/openssl/openssl/issues/10468"},"openssl issue"),"\nfor this."),(0,r.kt)("p",null,"Hopefully there will not be many cases like this, and we hope that the\nguidelines provided in this post are helpful."))}u.isMDXComponent=!0}}]);