"use strict";(self.webpackChunktrustification_io=self.webpackChunktrustification_io||[]).push([[9763],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>f});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},h=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),p=c(n),d=r,f=p["".concat(l,".").concat(d)]||p[d]||u[d]||a;return n?o.createElement(f,i(i({ref:t},h),{},{components:n})):o.createElement(f,i({ref:t},h))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5144:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var o=n(7462),r=(n(7294),n(3905));const a={title:"Sigstore, in-toto, OPA, orientation",authors:"danbev",tags:["sigstore"]},i=void 0,s={permalink:"/blog/2023/01/11/sigstore-in-toto-opa",editUrl:"https://github.com/trustification/trustification.github.io/tree/main/blog/2023-01-11-sigstore-in-toto-opa.md",source:"@site/blog/2023-01-11-sigstore-in-toto-opa.md",title:"Sigstore, in-toto, OPA, orientation",description:"As someone who was completly new to secure supply chain security (sscs) there",date:"2023-01-11T00:00:00.000Z",formattedDate:"January 11, 2023",tags:[{label:"sigstore",permalink:"/blog/tags/sigstore"}],readingTime:3.21,hasTruncateMarker:!0,authors:[{name:"Daniel Bevenius",title:"Maintainer",url:"https://github.com/danbev",imageURL:"https://github.com/danbev.png",key:"danbev"}],frontMatter:{title:"Sigstore, in-toto, OPA, orientation",authors:"danbev",tags:["sigstore"]},prevItem:{title:"Sigstore bundle format",permalink:"/blog/2023/01/13/sigstore-bundle-format"},nextItem:{title:"An Adventure with the CycloneDX Maven Plugin",permalink:"/blog/2022/12/09/cyclonedx-maven-plugin-adventure"}},l={authorsImageUrls:[void 0]},c=[],h={toc:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,o.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"As someone who was completly new to secure supply chain security (sscs) there\nwere a lot of new projects that I learned the names of but did not really\nunderstand exactly what they did or how they complement each other. This post\nhopes to clarify a few of these projects, and others will be addressed in future\nposts."),(0,r.kt)("p",null,"Lets say we have a software project that we want to distribute. We want to sign\nthe artifact that we produce, and lets say it's distributed as a tar file. It\nis possible to do this signing manually, but it involves some work like managing\nkeys and using tools to perform the signing tasks. Using\n",(0,r.kt)("a",{parentName:"p",href:"https://www.sigstore.dev/"},"sigstore")," simplfies this process, similar to how\nLet's Encrypt made it simpler to get certificates to be used with web sites.\nSigstore also provides tools to verify signatures and a transparency log to\nstore signatures. So that allows us to sign our end product, and publish the\nsignatures to the transparency log, and consumers/clients can verify our\nartifact."),(0,r.kt)("p",null,"But how can we trust what was built? For example, if I built this tar on my\nlocal laptop I could replace a source code file with a backdoor and still be\nable to produce a valid signature, and it could still be verified. This is also\nthe case if a build server is used and it gets compromised, so we need something\nmore."),(0,r.kt)("p",null,"This is where another project named ",(0,r.kt)("a",{parentName:"p",href:"https://in-toto.io/"},"in-toto")," comes into\nplay. It contains tools to define the steps of a build process, and assign\nsomeone that is responsible for each step. This person also signs the artifact\nproduced by that step. So each step is signed by the person responsible for that\nstep, called the funtionary, and then all the steps are signed by a product\nowner. This will produce a document which lists the steps that were followed to\nproduce the software, with signatures for each step."),(0,r.kt)("p",null,"For example, one step might have been checking out a specific version from git,\nand this could be verified that it was indeed that version that was used, and\nthe source files that were used. This gives the end user insight into the\nproduct that they are about to install and the ability to verify it."),(0,r.kt)("p",null,"So we now have our built artifact, signed it, and we have attestations, in\nthis case json files that contain metadata about how it was built. And we can\nuse in-toto-verify to verify that all that information is correct."),(0,r.kt)("p",null,"Now, lets say that another company, or another project, wants to include our\nsoftware in their project, as a thirdparty dependency. Ours might be one of many\ndependencies that they include in their product and they might have\nrequirements/restrictions on what they are allowed to use. For example, they\nmight require that only certain licences are used. The license information is\nhopefully available in the project, like a license file or field in Cargo.toml,\nbut there is nothing available to say that only certain licenses are allowed.\nThis is where a policy engine like\n",(0,r.kt)("a",{parentName:"p",href:"https://www.openpolicyagent.org/"},"Open Policy Agent (OPA)")," comes into play. OPA\ngives us the ability to write policy rules that take in-toto json files as\ninput, and verify that there are licences for all thirdparty dependencies and\nthat they are of the type(s) that are allowed. Rules can be written to handle\nother types of restrictions/requirements as well, which are the policies that\nthe company has."),(0,r.kt)("p",null,"So they could include a step in their build process that execute enforces the\npolicy rules they have defined. Policy rules can also be useful when deploying\napplications in container images where one might want to make sure that only\nsupported base images are used etc."),(0,r.kt)("p",null,"Hopefully this post gives some insight into how Sigstore, in-toto, and OPA may\nbe used, and how they complement each other."))}u.isMDXComponent=!0}}]);